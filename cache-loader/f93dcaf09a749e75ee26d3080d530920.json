{"remainingRequest":"D:\\showU\\GGMS\\node_modules\\babel-loader\\lib\\index.js!D:\\showU\\GGMS\\node_modules\\eslint-loader\\index.js??ref--1!D:\\showU\\GGMS\\src\\store\\modules\\tagsView.js","dependencies":[{"path":"D:\\showU\\GGMS\\src\\store\\modules\\tagsView.js","mtime":1534753146220},{"path":"D:\\showU\\GGMS\\.babelrc","mtime":1532942817774},{"path":"D:\\showU\\GGMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1533288711758},{"path":"D:\\showU\\GGMS\\node_modules\\babel-loader\\lib\\index.js","mtime":1530808242000},{"path":"D:\\showU\\GGMS\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport _Promise from 'babel-runtime/core-js/promise';\nimport _getIterator from 'babel-runtime/core-js/get-iterator';\nimport _slicedToArray from 'babel-runtime/helpers/slicedToArray';\nimport _Object$assign from 'babel-runtime/core-js/object/assign';\nvar tagsView = {\n  state: {\n    visitedViews: [],\n    cachedViews: []\n  },\n  mutations: {\n    ADD_VISITED_VIEWS: function ADD_VISITED_VIEWS(state, view) {\n      if (state.visitedViews.some(function (v) {\n        return v.path === view.path;\n      })) {\n        return;\n      }\n      state.visitedViews.push(_Object$assign({}, view, {\n        title: view.meta.title || 'no-name'\n      }));\n      if (!view.meta.noCache) {\n        state.cachedViews.push(view.name);\n      }\n    },\n    DEL_VISITED_VIEWS: function DEL_VISITED_VIEWS(state, view) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _getIterator(state.visitedViews.entries()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _ref = _step.value;\n\n          var _ref2 = _slicedToArray(_ref, 2);\n\n          var i = _ref2[0];\n          var v = _ref2[1];\n\n          if (v.path === view.path) {\n            state.visitedViews.splice(i, 1);\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = _getIterator(state.cachedViews), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var _i = _step2.value;\n\n          if (_i === view.name) {\n            var index = state.cachedViews.indexOf(_i);\n            state.cachedViews.splice(index, 1);\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    },\n    DEL_OTHERS_VIEWS: function DEL_OTHERS_VIEWS(state, view) {\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = _getIterator(state.visitedViews.entries()), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _ref3 = _step3.value;\n\n          var _ref4 = _slicedToArray(_ref3, 2);\n\n          var i = _ref4[0];\n          var v = _ref4[1];\n\n          if (v.path === view.path) {\n            state.visitedViews = state.visitedViews.slice(i, i + 1);\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = _getIterator(state.cachedViews), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var _i2 = _step4.value;\n\n          if (_i2 === view.name) {\n            var index = state.cachedViews.indexOf(_i2);\n            state.cachedViews = state.cachedViews.slice(index, index + 1);\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n    },\n    DEL_ALL_VIEWS: function DEL_ALL_VIEWS(state) {\n      state.visitedViews = [];\n      state.cachedViews = [];\n    }\n  },\n  actions: {\n    addVisitedViews: function addVisitedViews(_ref5, view) {\n      var commit = _ref5.commit;\n\n      commit('ADD_VISITED_VIEWS', view);\n    },\n    delVisitedViews: function delVisitedViews(_ref6, view) {\n      var commit = _ref6.commit,\n          state = _ref6.state;\n\n      return new _Promise(function (resolve) {\n        commit('DEL_VISITED_VIEWS', view);\n        resolve([].concat(_toConsumableArray(state.visitedViews)));\n      });\n    },\n    delOthersViews: function delOthersViews(_ref7, view) {\n      var commit = _ref7.commit,\n          state = _ref7.state;\n\n      return new _Promise(function (resolve) {\n        commit('DEL_OTHERS_VIEWS', view);\n        resolve([].concat(_toConsumableArray(state.visitedViews)));\n      });\n    },\n    delAllViews: function delAllViews(_ref8) {\n      var commit = _ref8.commit,\n          state = _ref8.state;\n\n      return new _Promise(function (resolve) {\n        commit('DEL_ALL_VIEWS');\n        resolve([].concat(_toConsumableArray(state.visitedViews)));\n      });\n    }\n  }\n};\n\nexport default tagsView;",{"version":3,"sources":["src\\store\\modules\\tagsView.js"],"names":["tagsView","state","visitedViews","cachedViews","mutations","ADD_VISITED_VIEWS","view","some","v","path","push","title","meta","noCache","name","DEL_VISITED_VIEWS","entries","i","splice","index","indexOf","DEL_OTHERS_VIEWS","slice","DEL_ALL_VIEWS","actions","addVisitedViews","commit","delVisitedViews","resolve","delOthersViews","delAllViews"],"mappings":";;;;;AAAA,IAAMA,WAAW;AACfC,SAAO;AACLC,kBAAc,EADT;AAELC,iBAAa;AAFR,GADQ;AAKfC,aAAW;AACTC,uBAAmB,2BAACJ,KAAD,EAAQK,IAAR,EAAiB;AAClC,UAAIL,MAAMC,YAAN,CAAmBK,IAAnB,CAAwB;AAAA,eAAKC,EAAEC,IAAF,KAAWH,KAAKG,IAArB;AAAA,OAAxB,CAAJ,EAAwD;AACtD;AACD;AACDR,YAAMC,YAAN,CAAmBQ,IAAnB,CAAwB,eAAc,EAAd,EAAkBJ,IAAlB,EAAwB;AAC9CK,eAAOL,KAAKM,IAAL,CAAUD,KAAV,IAAmB;AADoB,OAAxB,CAAxB;AAGA,UAAI,CAACL,KAAKM,IAAL,CAAUC,OAAf,EAAwB;AACtBZ,cAAME,WAAN,CAAkBO,IAAlB,CAAuBJ,KAAKQ,IAA5B;AACD;AACF,KAXQ;AAYTC,uBAAmB,2BAACd,KAAD,EAAQK,IAAR,EAAiB;AAAA;AAAA;AAAA;;AAAA;AAClC,0CAAqBL,MAAMC,YAAN,CAAmBc,OAAnB,EAArB,4GAAmD;AAAA;;AAAA;;AAAA,cAAvCC,CAAuC;AAAA,cAApCT,CAAoC;;AACjD,cAAIA,EAAEC,IAAF,KAAWH,KAAKG,IAApB,EAA0B;AACxBR,kBAAMC,YAAN,CAAmBgB,MAAnB,CAA0BD,CAA1B,EAA6B,CAA7B;AACA;AACD;AACF;AANiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAOlC,2CAAgBhB,MAAME,WAAtB,iHAAmC;AAAA,cAAxBc,EAAwB;;AACjC,cAAIA,OAAMX,KAAKQ,IAAf,EAAqB;AACnB,gBAAMK,QAAQlB,MAAME,WAAN,CAAkBiB,OAAlB,CAA0BH,EAA1B,CAAd;AACAhB,kBAAME,WAAN,CAAkBe,MAAlB,CAAyBC,KAAzB,EAAgC,CAAhC;AACA;AACD;AACF;AAbiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcnC,KA1BQ;AA2BTE,sBAAkB,0BAACpB,KAAD,EAAQK,IAAR,EAAiB;AAAA;AAAA;AAAA;;AAAA;AACjC,2CAAqBL,MAAMC,YAAN,CAAmBc,OAAnB,EAArB,iHAAmD;AAAA;;AAAA;;AAAA,cAAvCC,CAAuC;AAAA,cAApCT,CAAoC;;AACjD,cAAIA,EAAEC,IAAF,KAAWH,KAAKG,IAApB,EAA0B;AACxBR,kBAAMC,YAAN,GAAqBD,MAAMC,YAAN,CAAmBoB,KAAnB,CAAyBL,CAAzB,EAA4BA,IAAI,CAAhC,CAArB;AACA;AACD;AACF;AANgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAOjC,2CAAgBhB,MAAME,WAAtB,iHAAmC;AAAA,cAAxBc,GAAwB;;AACjC,cAAIA,QAAMX,KAAKQ,IAAf,EAAqB;AACnB,gBAAMK,QAAQlB,MAAME,WAAN,CAAkBiB,OAAlB,CAA0BH,GAA1B,CAAd;AACAhB,kBAAME,WAAN,GAAoBF,MAAME,WAAN,CAAkBmB,KAAlB,CAAwBH,KAAxB,EAA+BA,QAAQ,CAAvC,CAApB;AACA;AACD;AACF;AAbgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAclC,KAzCQ;AA0CTI,mBAAe,uBAACtB,KAAD,EAAW;AACxBA,YAAMC,YAAN,GAAqB,EAArB;AACAD,YAAME,WAAN,GAAoB,EAApB;AACD;AA7CQ,GALI;AAoDfqB,WAAS;AACPC,mBADO,kCACqBnB,IADrB,EAC2B;AAAA,UAAhBoB,MAAgB,SAAhBA,MAAgB;;AAChCA,aAAO,mBAAP,EAA4BpB,IAA5B;AACD,KAHM;AAIPqB,mBAJO,kCAI4BrB,IAJ5B,EAIkC;AAAA,UAAvBoB,MAAuB,SAAvBA,MAAuB;AAAA,UAAfzB,KAAe,SAAfA,KAAe;;AACvC,aAAO,aAAY,UAAC2B,OAAD,EAAa;AAC9BF,eAAO,mBAAP,EAA4BpB,IAA5B;AACAsB,6CAAY3B,MAAMC,YAAlB;AACD,OAHM,CAAP;AAID,KATM;AAUP2B,kBAVO,iCAU2BvB,IAV3B,EAUiC;AAAA,UAAvBoB,MAAuB,SAAvBA,MAAuB;AAAA,UAAfzB,KAAe,SAAfA,KAAe;;AACtC,aAAO,aAAY,UAAC2B,OAAD,EAAa;AAC9BF,eAAO,kBAAP,EAA2BpB,IAA3B;AACAsB,6CAAY3B,MAAMC,YAAlB;AACD,OAHM,CAAP;AAID,KAfM;AAgBP4B,eAhBO,8BAgBwB;AAAA,UAAjBJ,MAAiB,SAAjBA,MAAiB;AAAA,UAATzB,KAAS,SAATA,KAAS;;AAC7B,aAAO,aAAY,UAAC2B,OAAD,EAAa;AAC9BF,eAAO,eAAP;AACAE,6CAAY3B,MAAMC,YAAlB;AACD,OAHM,CAAP;AAID;AArBM;AApDM,CAAjB;;AA6EA,eAAeF,QAAf","file":"tagsView.js","sourceRoot":"D:/showU/GGMS","sourcesContent":["const tagsView = {\r\n  state: {\r\n    visitedViews: [],\r\n    cachedViews: []\r\n  },\r\n  mutations: {\r\n    ADD_VISITED_VIEWS: (state, view) => {\r\n      if (state.visitedViews.some(v => v.path === view.path)) {\r\n        return;\r\n      }\r\n      state.visitedViews.push(Object.assign({}, view, {\r\n        title: view.meta.title || 'no-name'\r\n      }));\r\n      if (!view.meta.noCache) {\r\n        state.cachedViews.push(view.name);\r\n      }\r\n    },\r\n    DEL_VISITED_VIEWS: (state, view) => {\r\n      for (const [i, v] of state.visitedViews.entries()) {\r\n        if (v.path === view.path) {\r\n          state.visitedViews.splice(i, 1);\r\n          break;\r\n        }\r\n      }\r\n      for (const i of state.cachedViews) {\r\n        if (i === view.name) {\r\n          const index = state.cachedViews.indexOf(i);\r\n          state.cachedViews.splice(index, 1);\r\n          break;\r\n        }\r\n      }\r\n    },\r\n    DEL_OTHERS_VIEWS: (state, view) => {\r\n      for (const [i, v] of state.visitedViews.entries()) {\r\n        if (v.path === view.path) {\r\n          state.visitedViews = state.visitedViews.slice(i, i + 1);\r\n          break;\r\n        }\r\n      }\r\n      for (const i of state.cachedViews) {\r\n        if (i === view.name) {\r\n          const index = state.cachedViews.indexOf(i);\r\n          state.cachedViews = state.cachedViews.slice(index, index + 1);\r\n          break;\r\n        }\r\n      }\r\n    },\r\n    DEL_ALL_VIEWS: (state) => {\r\n      state.visitedViews = [];\r\n      state.cachedViews = [];\r\n    }\r\n  },\r\n  actions: {\r\n    addVisitedViews({ commit }, view) {\r\n      commit('ADD_VISITED_VIEWS', view);\r\n    },\r\n    delVisitedViews({ commit, state }, view) {\r\n      return new Promise((resolve) => {\r\n        commit('DEL_VISITED_VIEWS', view);\r\n        resolve([...state.visitedViews]);\r\n      });\r\n    },\r\n    delOthersViews({ commit, state }, view) {\r\n      return new Promise((resolve) => {\r\n        commit('DEL_OTHERS_VIEWS', view);\r\n        resolve([...state.visitedViews]);\r\n      });\r\n    },\r\n    delAllViews({ commit, state }) {\r\n      return new Promise((resolve) => {\r\n        commit('DEL_ALL_VIEWS');\r\n        resolve([...state.visitedViews]);\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nexport default tagsView;\r\n"]}]}